// dotenv „ÇíË™≠„ÅøËæº„ÇÄ
require("dotenv").config();

// ÂøÖË¶Å„Å™„É¢„Ç∏„É•„Éº„É´„ÇíË™≠„ÅøËæº„ÇÄ
const express = require("express");
const https = require("https");
const path = require("path");

// Express „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂàùÊúüÂåñ
const app = express();

// Google API„Ç≠„Éº„ÇíÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæó
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´„ÇíÊèê‰æõ (public „Éï„Ç©„É´„ÉÄ„Çí‰ΩøÁî®)

app.use(express.static(path.join(__dirname, "public")));

// JSON„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÇíËß£Êûê
app.use(express.json());

// Ê§úÁ¥¢„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post("/search", (req, res) => {

  const { keyword, lat, lng, radius = 3000, limit = 10 } = req.body; // ÂøÖË¶Å„Å™Â§âÊï∞„Çí‰∏ÄÂ∫¶„Å´ÂÆ£Ë®Ä

  if (!keyword || !lat || !lng) {
    return res.status(400).send("ÂøÖË¶Å„Å™„Éë„É©„É°„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ");
  }

  const placesApiUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&keyword=${encodeURIComponent(
    keyword
  )}&language=ja&key=${GOOGLE_API_KEY}`;
  

  https.get(placesApiUrl, (placesRes) => {
    let placesData = "";
    placesRes.on("data", (chunk) => {
      placesData += chunk;
    });
    placesRes.on("end", () => {
      const placesJson = JSON.parse(placesData);

      if (!placesJson.results || placesJson.results.length === 0) {
        return res.json([]);
      }

      const placesPromises = placesJson.results.map((place) => {
        return new Promise((resolve) => {

          const directionsApiUrl = `https://maps.googleapis.com/maps/api/directions/json?origin=${lat},${lng}&destination=${place.geometry.location.lat},${place.geometry.location.lng}&mode=walking&key=${GOOGLE_API_KEY}`;


          https
            .get(directionsApiUrl, (directionsRes) => {
              let directionsData = "";
              directionsRes.on("data", (chunk) => {
                directionsData += chunk;
              });
              directionsRes.on("end", () => {
                const directionsJson = JSON.parse(directionsData);
                const distanceText =
                  directionsJson.routes[0]?.legs[0]?.distance?.text || "‰∏çÊòé";
                const distanceValue =
                  directionsJson.routes[0]?.legs[0]?.distance?.value ||
                  Infinity;

                resolve({
                  name: place.name || "ÂêçÁß∞‰∏çÊòé",
                  address: place.vicinity || "‰ΩèÊâÄ‰∏çÊòé",
                  rating: place.rating || "Ë©ï‰æ°„Å™„Åó",
                  distanceText,
                  distanceValue,

                  userRatingsTotal: place.user_ratings_total || 0,

                  mapLink: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,

                   // ‚úÖ „Åì„Çå„ÇíËøΩÂä†
  „ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄplaceId: place.place_id,
  
                });
              });
            })
            .on("error", (err) => {

              console.error("Directions API„Ç®„É©„Éº:", err);

              resolve({
                name: place.name || "ÂêçÁß∞‰∏çÊòé",
                address: place.vicinity || "‰ΩèÊâÄ‰∏çÊòé",
                rating: place.rating || "Ë©ï‰æ°„Å™„Åó",
                distanceText: "ÂèñÂæó„Ç®„É©„Éº",
                distanceValue: Infinity,
              });
            });
        });
      });

      Promise.all(placesPromises).then((results) => {
        const filteredResults = results
          .filter((place) => place.distanceValue <= radius) // ÊåáÂÆöÁØÑÂõ≤ÂÜÖ
          .sort((a, b) => b.rating - a.rating) // Ë©ï‰æ°È†Ü
          .slice(0, limit); // ‰ª∂Êï∞Âà∂Èôê
        res.json(filteredResults);
      });
    });
  });
});

// ÊñΩË®≠Ë©≥Á¥∞„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get("/place-details", (req, res) => {
  console.time("üîç place-details ÂÖ®‰ΩìÂá¶ÁêÜÊôÇÈñì");

  const placeId = req.query.place_id;

  if (!placeId) {
    console.timeEnd("üîç place-details ÂÖ®‰ΩìÂá¶ÁêÜÊôÇÈñì");
    return res.status(400).json({ error: "place_id „Éë„É©„É°„Éº„Çø„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ" });
  }

  if (typeof GOOGLE_API_KEY === "undefined") {
    console.error("‚ùå GOOGLE_API_KEY „ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
    console.timeEnd("üîç place-details ÂÖ®‰ΩìÂá¶ÁêÜÊôÇÈñì");
    return res.status(500).json({ error: "API„Ç≠„Éº„ÅåÊú™Ë®≠ÂÆö„Åß„Åô„ÄÇ" });
  }

  // „Åì„Åì„ÅåÊäú„Åë„Å¶„Åü‚ÄºÔ∏è
  const apiUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&key=${GOOGLE_API_KEY}`;

  // API„É™„ÇØ„Ç®„Çπ„Éà
  console.time("üåê Google API „É™„ÇØ„Ç®„Çπ„ÉàÊôÇÈñì");

  https
    .get(apiUrl, (apiRes) => {
      let data = "";

      apiRes.on("data", (chunk) => {
        data += chunk;
      });

      apiRes.on("end", () => {
        console.timeEnd("üåê Google API „É™„ÇØ„Ç®„Çπ„ÉàÊôÇÈñì");

        try {
          const placeDetails = JSON.parse(data);
          res.json(placeDetails);
        } catch (err) {
          res.status(500).json({ error: "Ë©≥Á¥∞„Éá„Éº„Çø„ÅÆËß£Êûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ" });
        }

        console.timeEnd("üîç place-details ÂÖ®‰ΩìÂá¶ÁêÜÊôÇÈñì");
      });
    })
    .on("error", (err) => {
      console.timeEnd("üåê Google API „É™„ÇØ„Ç®„Çπ„ÉàÊôÇÈñì");
      console.timeEnd("üîç place-details ÂÖ®‰ΩìÂá¶ÁêÜÊôÇÈñì");
      res.status(500).json({ error: "API „É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº„ÄÇ", details: err.message });
    });
    // „Åì„Åì„Åæ„Åß„ÅåAPIÂá¶ÁêÜ
});

// „Éù„Éº„ÉàÁï™Âè∑„ÇíÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæó„ÄÇÊú™ÊåáÂÆö„Å™„Çâ3000Áï™„Çí‰ΩøÁî®
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("NearbyFinder „Çµ„Éº„Éê„Éº„ÅØÊ≠£Â∏∏„Å´Á®ºÂÉç‰∏≠„Åß„Åô„ÄÇ");
});

app.listen(PORT, () => {
  console.log(`„Çµ„Éº„Éê„ÉºËµ∑Âãï‰∏≠Ôºö http://localhost:${PORT}`);
});